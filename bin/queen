#!/usr/bin/env node

var tty = require('tty');

var app = require('commander'),
	path = require('path'),
	vm = require('vm'),
	utils = require('../lib/server/utils.js'),
	fs = require('fs');


var getExternalIpAddress = function(){
	var interfaces = require('os').networkInterfaces();
	var addresses = [];
	utils.each(interfaces, function(interface, name){
		addresses = addresses.concat(
						utils.filter(interface, function(node){ 
							return node.family === "IPv4" && node.internal === false;
						})
					);
	});

	if(addresses.length > 0){
		return addresses[0].address;
	}
};

var startQueen = function(config){
	var createQueenRemoteServer = require('queen-remote').server,
		createQueen = require('../'),
		log,
		debug,
		captureHost = config.captureHost,
		capturePort = config.capturePort,
		autoSpawn = config.autoSpawn || [{browserName: "safari"},{browserName: "internet explorer"}];

	if(config.quiet !== false){
		log = console.log.bind(console);
	}

	if(config.verbose){
		debug = console.log.bind(console);
	}

	createQueen({
		callback: onQueenReady,
		port: capturePort,
		host: captureHost,
		autoSpawn: autoSpawn,
		log: log,
		debug: debug
	});

	function onQueenReady(queen){
		process.on('exit', queen.kill); // Won't work on windows
		
		var createSeleniumPopulator = require('../lib/server/seleniumPopulator.js');
		var seleniumPopulator = createSeleniumPopulator(
			{
				host: 'localhost', 
				port: 4445
			}
		);

		queen.attachPopulator(seleniumPopulator);

		if(config.script){
			global.queen = queen;

			try {
				var context = vm.createContext(global);
				vm.runInContext(fs.readFileSync(config.script), context);
			} catch(e) {
				if (e.name === 'SyntaxError') {
				  console.error('Syntax error in config file!\n' + e.message);
				} else if (e.code === 'ENOENT' || e.code === 'EISDIR') {
				  console.error('Config file does not exist!');
				} else {
				  console.error('Invalid file!\n', e);
				}

				process.exit(1);
			}
		} else if(config.noRemote !== false) {
			var remoteServer = createQueenRemoteServer(queen, {
				port: config.port,
				host: config.host || getExternalIpAddress(),
				log: log,
				debug: debug
			});
		}
	}
};

app.version('0.1.0');
	
app.option('-p, --port <n>', 'The port to bind the remote server to', parseInt)
	.option('-h, --host [hostname]', 'The host to bind the remote server to')
	.option('--noRemote', 'Disable remote requests to this server')
	.option('--capturePort <n>', 'The port to use when capturing browsers', parseInt)
	.option('--captureHost [hostname]', 'The hostname to use when capturing browsers')
	.option('-v, --verbose', 'Whether to log verbosely')
	.option('-q, --quiet', 'Don\'t output anything to output stream')
	.option('-s, --script [script]', 'A queen script to run');

app.parse(process.argv);

startQueen(app);

