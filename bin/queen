#!/usr/bin/env node

var app = require('commander'),
	path = require('path'),
	queenRunner = require('../../queen-remote').runner,
	queenFactory = require('../');
	startQueen = true,
	config = {};

app.version('0.3.0');
	
app.option('-h, --host [host]', 'The host to bind the remote server to')
	.option('-c, --capture [hostname]', 'The host ot bind the http server to for capturing browsers')
	.option('--heartbeatInterval <n>', 'Milliseconds clients have to send a heartbeat until deemed unresponsive', parseInt)
	.option('-v, --verbose', 'Whether to log verbosely')
	.option('-q, --quiet', 'Don\'t output anything to output stream');

app.command("*").action(function(filePath){
	if(~filePath.indexOf("://")){
		config.script = filePath;
	} else {
		config.module = path.resolve(process.cwd(), filePath);		
	}
});

app.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('  Start queen with default options:');
  console.log('     $ queen');
  console.log('');
  console.log('  Run a JavaScript file, adding in a "queen" global variable:');
  console.log('     $ queen my-queen-script.js');
  console.log('');
  console.log('  Start a queen server on the hostname "queen.turn.com", listening to port 9564 for runners:');
  console.log('     $ queen -h queen.turn.com:9564');
  console.log('');
});

app.parse(process.argv);

if(!startQueen) return;

config.host = app.host;
config.capture = app.capture;
config.quiet = app.quiet;
config.verbose = app.verbose;

config.plugin = {};
config.plugin.monitor = require("queen-monitor-plugin");
config.plugin.populator = require("queen-populator-plugin");

queenRunner(queenFactory, config, function(queen){
	if(queen instanceof Error){
		throw queen; // this is an error object
	} else {
		queen.on('dead', function(){
			process.exit(0);
		});
	}
});

